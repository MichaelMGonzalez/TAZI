import wsgiref.simple_server
import webapp2
import subprocess
from ServerFiles.Handlers import *
from ServerFiles.ProgramManager import not_loaded


############################# Main Functions ############################# 
def main (app):
    port = 8081
    httpd = wsgiref.simple_server.make_server('', port, app)
    print ("Serving HTTP on port "+str(port)+"...")
    httpd.serve_forever()

if __name__ == "__main__":
    # Setup argparse
    import argparse
    parser = argparse.ArgumentParser(description="From a gspec and a component library, compiles a schematic and semi-placed board.")
    parser.add_argument("-n", "--program_name", type=str,  default="blockly_executable", help="The name of the program generated by the server")
    parser.add_argument("-e", "--program_ext", type=str, default="ino", help="The file extention of the intermediary file generated by the server")
    parser.add_argument("-t", "--type", type=str, default="DefaultRobotWorkspace.xml", help="The file extention of the intermediary file generated by the server")
    args = parser.parse_args()
    # Ensure program directory exists
    if not os.path.exists( program_path ): 
        os.mkdir( program_path )
    p_dir = os.path.join(program_path, compiled_name )
    if not os.path.exists( p_dir ): 
        os.mkdir( p_dir )
    # Cleanup bad file names
    # subprocess.check_call(["rm", "-f", program_path+not_loaded+".xml"])
    # Define the compilation handler
    CompilationHandler = CompileInoHandler if args.program_ext == "ino" else CompileCPPHandler
    setupOutput( name=args.program_name, ext=args.program_ext, workspace=args.type)
    app = webapp2.WSGIApplication([ 
	("/", LandingHandler),
	("/newprogram", NewProgramHandler),
	("/runprogram", RunProgramHandler),
	("/killprogram", KillProgramHandler),
	("/saveprogram", SaveHandler),
	(r'/programs/(.+)', ProgramHandler),
	(r'/static/(.+)', StaticFileHandler),
	("/compile", CompilationHandler),
	]    , debug=True)
    main(app)

