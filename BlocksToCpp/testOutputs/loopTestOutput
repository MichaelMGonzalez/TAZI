=== countWNums.xml ===
--- stdout ---
;
void loop () {  ;
  for(int i = 1; i<= 10; i+= 1) {;
    double temp = 0;
  };
;
};


--------------
--- stderr ---
--------------

=== countWVars.xml ===
--- stdout ---
;
void setup () {
  double id1 = 1;
  double id2 = 10;
}
;
void loop () {  ;
  for(int i = 1; i<= 10; i+= 1) {;
    double temp = 0;
  };
;
};


--------------
--- stderr ---
--------------

=== EqualsWNums.xml ===
--- stdout ---
void loop () {
}


--------------
--- stderr ---
--------------

=== loopNumBound.xml ===
--- stdout ---
;
void loop () {  ;
  for(int count = 0; i < 10; i++) {;
    double item = 0;
  };
;
};


--------------
--- stderr ---
--------------

=== loopUntil.xml ===
--- stdout ---

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 548, in <module>
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 58, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 66, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 125, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 66, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 98, in getBlock
    return "void loop () {" + recurseParseCheck(list(node), depth+1) + ";\n}"
  File "blocklyTranslator.py", line 89, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 66, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 104, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 517, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 378, in whileUnt
    statement = recurseParse(list(node)[2], depth + 1)
IndexError: list index out of range

--------------

=== loopVarBound.xml ===
--- stdout ---
;
void setup () {
  double item = 10;
}
;
void loop () {  ;
  for(int count = 0; i < 10; i++) {;
    double temp = 0;
  };
;
};


--------------
--- stderr ---
--------------

=== loopWhile.xml ===
--- stdout ---

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 548, in <module>
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 58, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 66, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 125, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 66, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 98, in getBlock
    return "void loop () {" + recurseParseCheck(list(node), depth+1) + ";\n}"
  File "blocklyTranslator.py", line 89, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 66, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 104, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 517, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 378, in whileUnt
    statement = recurseParse(list(node)[2], depth + 1)
IndexError: list index out of range

--------------

