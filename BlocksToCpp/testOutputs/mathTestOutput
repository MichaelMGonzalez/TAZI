=== Add2Nums.xml ===
--- stdout ---
;
void setup () {
  int item = 7 + 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== AddVarNum.xml ===
--- stdout ---
;
void setup () {
  double id = 7;
  int item = id + 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== addVars.xml ===
--- stdout ---
;
void setup () {
  double id2 = 2;
  double id = 7;
  int item = id + id2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== Div2Nums.xml ===
--- stdout ---
;
void setup () {
  int item = 6 / 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== DivVarNum.xml ===
--- stdout ---
;
void setup () {
  double id1 = 6;
  int item = id1 / 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== DivVar.xml ===
--- stdout ---
;
void setup () {
  double id1 = 6;
  double id2 = 2;
  int item = id1 / id2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== Exp2Nums.xml ===
--- stdout ---
;
void setup () {
  int item = pow(7, 2);
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== ExpVarNum.xml ===
--- stdout ---
;
void setup () {
  double id = 7;
  int item = pow(id, 2);
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== ExpVars.xml ===
--- stdout ---
;
void setup () {
  double id2 = 2;
  double id = 7;
  int item = pow(id, id2);
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== ModNum.xml ===
--- stdout ---
Error: Block math_modulo is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== ModVar.xml ===
--- stdout ---
Error: Block math_modulo is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 229, in setVar
    return blockNext(node, depth, totString)
  File "blocklyTranslator.py", line 138, in blockNext
    return (spaces * depth) + nodeStr + recurseParse(list(node)[-1], depth)
  File "blocklyTranslator.py", line 52, in recurseParse
    return ";\n" + recurseParse(list(node)[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 229, in setVar
    return blockNext(node, depth, totString)
  File "blocklyTranslator.py", line 138, in blockNext
    return (spaces * depth) + nodeStr + recurseParse(list(node)[-1], depth)
  File "blocklyTranslator.py", line 52, in recurseParse
    return ";\n" + recurseParse(list(node)[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== Mult2Nums.xml ===
--- stdout ---
;
void setup () {
  int item = 6 * 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== MultVarNum.xml ===
--- stdout ---
;
void setup () {
  double id1 = 6;
  int item = id1 * 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== MultVar.xml ===
--- stdout ---
;
void setup () {
  double id1 = 6;
  double id2 = 2;
  int item = id1 * id2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== randFrac.xml ===
--- stdout ---
Error: Block math_random_float is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== randNumVar.xml ===
--- stdout ---
Error: Block math_random_int is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 229, in setVar
    return blockNext(node, depth, totString)
  File "blocklyTranslator.py", line 138, in blockNext
    return (spaces * depth) + nodeStr + recurseParse(list(node)[-1], depth)
  File "blocklyTranslator.py", line 52, in recurseParse
    return ";\n" + recurseParse(list(node)[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== randNum.xml ===
--- stdout ---
Error: Block math_random_int is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== randVars.xml ===
--- stdout ---
Error: Block math_random_int is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 229, in setVar
    return blockNext(node, depth, totString)
  File "blocklyTranslator.py", line 138, in blockNext
    return (spaces * depth) + nodeStr + recurseParse(list(node)[-1], depth)
  File "blocklyTranslator.py", line 52, in recurseParse
    return ";\n" + recurseParse(list(node)[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 229, in setVar
    return blockNext(node, depth, totString)
  File "blocklyTranslator.py", line 138, in blockNext
    return (spaces * depth) + nodeStr + recurseParse(list(node)[-1], depth)
  File "blocklyTranslator.py", line 52, in recurseParse
    return ";\n" + recurseParse(list(node)[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== sqrt.xml ===
--- stdout ---
;
void setup () {
  int item = sqrt(9);
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== Sub2Nums.xml ===
--- stdout ---
;
void setup () {
  int item = 7 - 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== SubVarNum.xml ===
--- stdout ---
;
void setup () {
  double id = 7;
  int item = id - 2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== SubVars.xml ===
--- stdout ---
;
void setup () {
  double id2 = 2;
  double id = 7;
  int item = id - id2;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

