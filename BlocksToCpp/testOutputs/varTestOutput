=== varTestBoolF.xml ===
--- stdout ---
Error: Block logic_boolean is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== varTestBoolNull.xml ===
--- stdout ---
;
void setup () {
  int item = 0;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== varTestBoolT.xml ===
--- stdout ---
Error: Block logic_boolean is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== varTestNotF.xml ===
--- stdout ---
Error: Block logic_boolean is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 372, in negate
    inner = recurseParse(list(list(node)[0])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== varTestNotT.xml ===
--- stdout ---
Error: Block logic_boolean is malformatted!

--------------
--- stderr ---Traceback (most recent call last):
  File "blocklyTranslator.py", line 552, in <module>
    run( inp )
  File "blocklyTranslator.py", line 533, in run
    print(recurseParse(root,0))
  File "blocklyTranslator.py", line 42, in recurseParse
    overallResult += ";\n" + recurseParse(child, depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 109, in getBlock
    lines += recurseParse( b, depth ) + ';\n'
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 85, in getBlock
    return "void setup () {\n" + recurseParseCheck(list(node), depth + 1) + ";\n}\n"
  File "blocklyTranslator.py", line 73, in recurseParseCheck
    return recurseParse(nodeList[0], depth)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 224, in setVar
    varValue = recurseParse(list(list(node)[1])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 88, in getBlock
    return funcCheckGet(blockType, node, depth) #funcGet[blockType](node,depth)
  File "blocklyTranslator.py", line 501, in funcCheckGet
    return funcGet[blockType](node, depth)
  File "blocklyTranslator.py", line 372, in negate
    inner = recurseParse(list(list(node)[0])[0], 0)
  File "blocklyTranslator.py", line 50, in recurseParse
    return getBlock(node,depth)
  File "blocklyTranslator.py", line 112, in getBlock
    return genericBlockGet(node,depth)
  File "blocklyTranslator.py", line 118, in genericBlockGet
    raise BlocklyError("Block " + blockType + " is malformatted!")
__main__.BlocklyError

--------------

=== varTestNum.xml ===
--- stdout ---
;
void setup () {
  double item = 89;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== varTestPi.xml ===
--- stdout ---
;
void setup () {
  int item = 3.14159265358979323846;
}
;
void loop () {
}


--------------
--- stderr ---
--------------

=== varTestString.xml ===
--- stdout ---
;
void setup () {
  string item = "Hello World";
}
;
void loop () {
}


--------------
--- stderr ---
--------------

