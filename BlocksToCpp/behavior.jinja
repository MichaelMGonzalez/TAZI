%- macro class_name(node_type)
%- if node_type == "selector_node": 
SelectorNode  
%- elif node_type == "sequence_node": 
SequenceNode	
%- elif node_type == "parallel_node": 
ParallelNode
%- elif node_type == "action_node": 
ActionNode
%- elif node_type == "condition_node": 
ConditionNode
%- elif node_type == "inverter": 
Inverter
%- elif node_type == "root_node": 
RootNode
%- endif
%- endmacro


%- macro constructor_input(n)
%- if n.function and (n.node_type == "action_node" or n.node_type == "condition_node")
{{n.function}}
%- else
new BehaviorNode[] {
%- endif
{{n.children}}
%- if n.children_array
}
%- endif
%- endmacro
using UnityEngine;
public abstract class {{name}}BehaviorTree : SwordWielder
{
    // Internal Nodes
	[Header("Nodes")]
	% for node_class, _nodes in sorted_nodes if node_class != "root_node"
	[Header("{{class_name(node_class)}}s")]
        % for node in _nodes
	public {{class_name(node.node_type)}} {{node.name}}; // id: {{node.id}}
        % endfor
	% endfor
	

    // Action Node Functions
	% for n in action_functions
	protected abstract BehaviorNode.State {{n}}();
	% endfor

    // Condition Node Functions
	% for n in condition_functions
	protected abstract bool {{n}}();
	% endfor
    
    
	protected override void OnEnable()
	{
	% for n in nodes
		{{ n.name}}.AssignChildren({{ constructor_input(n)}});
		{{ n.name}}.id = {{ n.id}};
		% if n.holds_state:
		{{ n.name}}.starred = true;
		% endif
	% endfor
		base.OnEnable();
	}
}


/**
 * Digraph Code
 *
 include "behavior.dot.jinja"
 *
 */